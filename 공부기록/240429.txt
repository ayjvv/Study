*JavaScript

함수Ex3~9 예제 / 배열Ex1~2

<함수function4>

<화살표 함수>
ES6+ 사용
함수 표현식(익명 함수)에서만 사용 가능
this, arguments, new 키워드 사용 어려움
 본문이 여러 줄인 경우 {} 사용 권장

{} 사용시 반드시 return 키워드를 통해 반환

변수명 = () => 실행문; 매개변수가 없는 경우 반드시 () 작성

변수명 = para1, para2 => { 매개변수가 있는 경우 () 생략 가능
        실행문;
        return 반환값;


<this 키워드>
일반 함수에는 메서드를 호출할 때 사용된 그 객체를 나타내는 키워드
일반함수에서 this는 객체 자신을 가리키는 키워드
참조하는 대상이 window, 혹은 상황에 따라 다른 객체를 참조하기도 함


<함수 스코프>
//부모함수 (전역 함수)
//내부(자식) 함수 (지역함수)
child(); // 부모 함수 내에서 자식 함수 호출
// child(); 함수내부에 정의 된 함수(지역 함수)는 기보적으로 외부에서 접근 불가


<콜백함수1>
callback function : 함수의 매개변수 parameter로 함수를 넘기는 것


<동기적 통신>
    function fn1() {
      console.log('동기적 호출 fn1')
    }

<비동기적 통신>
    function fn2() {
      setTimeout( () => console.log('비동기적 호출 fn2'), 2000)
    }

    fn1();
    console.log('순차적으로 호출');

    fn2();
    console.log('비동기 통신이기 때문에 순차적으로 호출되지 않음');


- 비동기 통신의 단점 콜백지옥. 그래서 async와 await를 통해 프라미스를 좀 더 편하게 사용 함



*비동기함수
<setTimeout>

3초 뒤에 실행
   setTimeout(콜백함수, 시간) 비동기 함수
      정해진 시간 뒤 한 번만 실행

      setTimeout(() => {
        console.log(`3초 뒤에 실행`)
      }, 3 * 1000);

- clearTimeout(); setTimeout() 중단


<setInterval>
-setInterval(콜백함수, 시간); 지정된 시간마다 반복 실행 비동기 함수
3초마다 실행





