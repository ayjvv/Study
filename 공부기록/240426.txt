*JavaScript

<배열Array1>
 배열 작성 -> [0,1,2];
배열 접근(읽기) -> 배열명[인덱스번호]; 인덱스 번호는 0부터 시작

배열 표현식(리터럴)
const a = [ ];

const b = {}; 객체
const c = () => {} 함수
const d = ''; 변수

.length  // 배열이 가지고 있는 요소의 수

<배열Array1>
console.log('.push() 배열의 제일 마지막에 추가 --');
console.log('.unshift() 배열의 제일 처음에 추가 --');
console.log('.concat() 둘 이상의 배열 연결 --');
 console.log('.join() 배열 안의 요소를 매개변수로 연결 --');
console.log('.splice(시작인덱스 [, 요소수, 대체요소]) --'); 특정 항목 삭제 및 대체
console.log('.slice(시작인덱스, 마지막 인덱스) --');
시작 인덱스 부터 마지막 인덱스 전까지 추출. 새로운 배열로 반환하기 때문에 원본 배열 값 유지
console.log('.delet 키워드: 요소"만" 제거 --');

<String객체>
 console.log('.trim() -------');
    // 문자열 양 끝 공백 제거. 스페이스, 탭, 줄바꿈 등 공백 제거

 console.log('.indexOf("검색대상문자열") -------');
    // 문자열 탐색. 인덱스 번호로 반환. -1은 찾을 수 없는 경우 반환. 대소문자 구분

console.log('.slice(시작인덱스[, 미포함인덱스]) -------');
     // 문자 추출. 두번째 인덱스를 생략하면 끝까지 출력. 두번째 인덱스 번호 작성시 그 인덱스 앞까지만 출력 [] 생략이 가능하다는 기호

 console.log('.replace(문자1,문자2) -------');
    // 문자1을 문자2로 변경. 가장 처음 만나는 글자 변경. 대소문자 구분

 console.log('.split("기준문자"[, 최대분할숫자]) -------');
    // 기준 문자를 분할 숫자만큼 나눠 배열로 반환

<함수function1>
특정 기능을 실행하기 위한 코드의 집합으로 호출을 통해 재사용 가능
객체 자료형 중 하나이기 때문에 변수 대입 가능
함수는 선언함수와 익명함수(함수 표현식)로 생성 가능

- 선언 함수: 이름을 가진 함수 선언문
          선언 함수의 경우 어느 곳에서나 호출 가능
          
          함수명(); <- 함수 호출calling. 여러 번 호출 가능하며 재사용이 목정
          function 함수명(매개변수) {
            실행문;
            return 반환값;
          }

      - 익명 함수: 이름이 없는 함수 표현식(변수에 값을 할당하는 것처럼 함수를 변수에 대입하여 사용)
          이름이 없기 때문에 변수에 대입하여 사용
          이름이 없기 때문에 반드시 함수를 호출하는 코드보다 먼저 작성되어야 함

          const 변수명 = function() {
            실행문;
            return 반환값;
          };
          변수명(); <- 함수 호출. 반드시 함수보다 호출 작성이 나중에 나와야 함


<함수function2>
   funtion num(매개변수1, parameter2,인자,인수...){
          실행문;
        }
        numm (인수);

<함수function2>
함수 안에서 선언된 변수나 값의 경우 외부에서 접근 불가능
리턴 키워드를 이용해 호출한 곳으로 반환
함수 실행 후 결과를 다시 얻고자 할 때 사용
함수 종료를 위해 사용

function fn(x){
        실행문;
        return; 함수 강제 종료. 이 다음 구문 실행 x
        retrun 반환 값; 반환값을 데이터로 반환