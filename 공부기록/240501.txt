*JavaScript

<재귀 함수>
함수 내부에서 자기 자신을 호출하는 함수
재귀 함수 사용시 종료 조건을 설정하지 않으면 무한 호출 됨
내부적으로 호출 스택(clal stack)을 사용하기 때문에 호출시 스택이 쌓이게 되고 각 호출이 종료되면 스택에서 제거됨
단점. 메모리 사용이 많음.

<즉시 실행 함수>
    (function 함수명 () {})();
    (function 함수명 () {} ())

<
const ampm = hour >= 12 ? '오후' : '오전'; //조건 ? true : false ;


<.padStart(문자열길이, '채워넣을 문자');>
.toString().padStart(2,'0');  //2자리가 안되면 0을 채워넣겠다.


<DOM객체1_탐색>
문서의 구조화된 표현으로 스크립트 및 프로그래밍 언어와 페이지를 연결
문서의 구조, 스타일, 콘텐츠를 변경

 //id 속성 노드 탐색 document.getElementById('id');
//class 속성 노드.getElementsByClassName('class');
      tag 노드 탐색 getElementsByTagName('tag');
      유사 배열 형태로 반환 -> [li, li, li, li]

//NodeList로 반환
        배열은 아니지만 배열처럼 처리할 수 있는 객체로 숫자로 된 key와 length 프로퍼티(속성)가 있음
        NodeList는 .forEach()는 사용 가능
        .map(), .filter() 등의 배열 메서드는 사용 불가능 <- 배열이 아니기 때문
        spread 연산자를 이용하여 배열로 변환 후 사용은 가능

<DOM객체2_표준속성>
        ul.id = 'gnb';
        a.href = '';
        body.style = '';
        input.value = '';
        input.type = '';
        img.src = '';

//html 표준 모델에서
        data-사용자정의이름=""
          data-color="", data-name="", data-size=""
      
// js 에서 접근
        .dataset.사용자정의이름; 사용자 정의 속성에 접근 가능
          .dataset.color, .dataset.name, .dataset.size

<class제어>
// .classList.add('클래스명'); 클래스 속성 추가

// .classList.remove(); 클래스 속성 제거

// .classList.toggle(); .add(), .remove()의 반복

// .className 속성. 클랙스 값을 가져오거나 변경

 // .classList.replace('현재클래스','변경클래스')


<event1>
무언가 일어났다는 신호
DOM에서 발생하는 이벤트 -> 마우스, 폼 요소, 키보드, 문서, CSS 이벤트
// 대상을 지정하지 않으면 전역객체 window에 binding
    addEventListener('click', () => alert ('클릭했습니다.'));


<event2-DOMContentLoaded>
// 다른 외부 구조, 노드 상관 없이 DOM만 불러오면 실행. 이미지나, 영상 등을 기다리지 않음
document.addEventListener('DOMContentLoaded',() =>{
document.body.innerHTML += write(1);
// DOM을 만들고 나서 실행했기 때문에 제일 마지막에 반환


<event3-이벤트 전달>
이벤트 버블링 bubbling : 자식 -> 부모 순으로 이벤트 전달. 주로 지원
이벤트 캡쳐링 capturing : 부모 -> 자식 순으로 이벤트 전달


<event4-이벤트제어>
 event.stopPropagation(); //현재 이벤트가 상위 노드까지 전달되는 것을 방지 (이벤트 버블링 방지)


<evente5-target>
event.target : 실제 이벤트가 발생하는 요소를 반환. 이벤트 리스너가 등록되어 있는 자식 요소 반환

event.currentTarget : 이벤트 리스너가 있는 요소를 반환. 이벤트를 등록해 놓은 요소 반환(일반적으로는 버튼)



